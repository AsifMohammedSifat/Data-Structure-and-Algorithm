Law of Height: max(leftNOde->height,rightNode->height)+1
Law of Diameter: lefNOde->Height+rightNode->Height

Diameter: Longest distance between any two nodes of a tree.
          There is a chance this longest distance can build without root node;
          For example: Look below tree
                            5
                          /   \
                    A-> 1       4
                               /  \
                              3    3
                             /      \
                            2        2
                           /          \
                    c->   1             1 <-B

            Note: I  assign each node value as their height.

            In this tree, with root distance from A to B is 6
                                             from C to B is 7

Prove: https://leetcode.com/problems/diameter-of-binary-tree/description/

--------------
Wrong Program:
--------------
  
class Solution {
public:
    int mx = 0;
    int height(TreeNode* root){
        if(root==NULL) return 0;
        int l = height(root->left);
        int r = height(root->right);
        return max(l,r)+1;
    }
    int diameterOfBinaryTree(TreeNode* root) {
        int ans = 0;
        int l = height(root->left);
        int r = height(root->right);
        return l+r;
    }
};

----------------
Correct Program:
----------------
  
class Solution {
public:
    int mx = 0;
    int height(TreeNode* root){
        if(root==NULL) return 0;
        int l = height(root->left);
        int r = height(root->right);
        int d = l+r;
        mx = max(mx,d);
        return max(l,r)+1;
    }
    int diameterOfBinaryTree(TreeNode* root) {
        int ans = 0;
        int l = height(root->left);
        int r = height(root->right);
        return max(mx,l+r);
    }
};
